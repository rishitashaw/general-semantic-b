{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","borderColor","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","bgGradient","_hover","_active","transform","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","color","fontSize","bgClip","fontWeight","isFitted","variant","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","isCentered","fontFamily","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","pl","UserListItem","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","startColor","endColor","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","borderWidth","textAlign","count","effect","Effect","SCALE","notif","n","as","Button","rightIcon","_focus","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40a44b8a.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        {/* <FormLabel>Email Address</FormLabel> */}\n        <Input borderColor='gray.600'\n\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        {/* <FormLabel>Password</FormLabel> */}\n        <InputGroup size=\"md\">\n          <Input borderColor='gray.600'\n\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme='purple'>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n        bgGradient='linear(to-l, #7928CA, #FF0080)'\n        _hover={{ bgGradient: 'linear(to-l, #FF0080, #7928CA)' }}\n        // _hover={{ bg: '#ebedf0' }}\n        _active={{\n          bgGradient: 'linear(to-r, teal.500, green.500)',\n          transform: 'scale(0.98)',\n          borderColor: '#bec3c9',\n        }}\n      >\n        Login\n      </Button>\n      {/* <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button> */}\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"first-name\" isRequired >\n        {/* <FormLabel>Name</FormLabel> */}\n        <Input borderColor='gray.600'\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        {/* <FormLabel>Email Address</FormLabel> */}\n        <Input borderColor='gray.600'\n\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        {/* <FormLabel>Password</FormLabel> */}\n        <InputGroup size=\"md\">\n          <Input borderColor='gray.600'\n\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme='purple'>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup >\n      </FormControl >\n      <FormControl id=\"password\" isRequired>\n        {/* <FormLabel>Confirm Password</FormLabel> */}\n        <InputGroup size=\"md\">\n          <Input borderColor='gray.600'\n\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme='purple'>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        {/* <FormLabel>Upload your Picture</FormLabel> */}\n        <Input borderColor='gray.600'\n          placeholder=\"Upload Profile Picture\"\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        // colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n        bgGradient='linear(to-l, #7928CA, #FF0080)'\n        _hover={{ bgGradient: 'linear(to-l, #FF0080, #7928CA)' }}\n        // _hover={{ bg: '#ebedf0' }}\n        _active={{\n          bgGradient: 'linear(to-r, teal.500, green.500)',\n          transform: 'scale(0.98)',\n          borderColor: '#bec3c9',\n        }}\n      >\n        Sign Up\n      </Button>\n    </VStack >\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"md\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"#242933\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"xl\"\n        // borderWidth=\"1px\"\n        color=\"#FFFFFF\"\n      >\n        <Text\n          fontSize=\"3xl\"\n          bgGradient={[\n            'linear(to-tr, teal.300, yellow.400)',\n            'linear(to-t, blue.200, teal.500)',\n            'linear(to-b, orange.100, purple.300)',\n          ]}\n          bgClip='text'\n          fontWeight='extrabold'\n\n        >\n          General Semantic\n        </Text>\n      </Box>\n      <Box bg=\"#242933\" w=\"100%\" p={4} borderRadius=\"xl\" color=\"#FFFFFF\">\n        <Tabs isFitted variant=\"soft-rounded\" colorScheme=\"purple\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Avatar } from \"stream-chat-react\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://General Semantic.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${ user.token }`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${ selectedChat._id }`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${ user.token }`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            fontWeight=\"bold\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n              colorScheme=\"blue\"\n            />\n\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#282D3E\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{\n                      marginBottom: 15, marginLeft: 0,\n                      // background: \"#242933\"\n                    }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#242933\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n                _hover={{\n                  bg: '#242933'\n                }}\n\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"lg\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  // console.log(user)\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton colorScheme=\"blue\" d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"md\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"450px\" bg=\"#242933\" color=\"#fff\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"18px\", md: \"18px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Name: <strong>{user.name} </strong><br />\n              Email: <strong>{user.email}</strong> <br />\n              KYC: <strong>NOT VERIFIED</strong> <br />\n              Profile Since: <strong></strong>\n\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose} colorScheme=\"blue\">Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n                <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={m.sender.name}\n                    src={m.sender.pic}\n                  />\n                </Tooltip>\n              )}\n            <span\n              style={{\n                backgroundColor: `${ m.sender._id === user._id ? \"#00ad84\" : \"#353c4c\"\n                  }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"#242933\"\n      color=\"#fff\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"2xl\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n      <Skeleton startColor='gray.700' endColor='gray.500' height=\"50px\" borderRadius='xl' />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${ user.token }`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${ search }`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${ user.token }`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"#242933\" color=\"#fff\">\n          <ModalHeader\n            fontSize=\"30px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Chatroom\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chatroom Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { IconButton, Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    console.log(user.token);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${ user.token }`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"#282D3E\"\n      color=\"#fff\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n    // borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"20px\", md: \"22px\" }}\n        fontFamily=\"Work sans\"\n        fontWeight=\"bold\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        10,201 Coins\n        <Button\n          d=\"flex\"\n          fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n          colorScheme=\"yellow\"\n          borderRadius='xl'\n\n        >Find a Stranger</Button>\n        <GroupChatModal>\n          <IconButton\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            icon={<AddIcon />}\n            colorScheme=\"blue\"\n            borderRadius='xl'\n\n          />\n\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#282d3e\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"2xl\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#242933\" : \"#282D3E\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={5}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text color=\"white\">\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\" color=\"gray.200\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${ user.token }`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${ search }`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${ user.token }`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <div style={{ background: '#282d3e' }}>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"#282D3E\"\n        color=\"#fff\"\n        w=\"100%\"\n        p=\"10px\"\n        borderWidth=\"5px\"\n        borderColor=\"#282d3e\"\n        borderRadius=\"2xl\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button\n            borderRadius='xl'\n            variant='outline'\n            onClick={onOpen}\n            bg='#282d3e'\n            borderWidth='lg'\n            borderColor='gray.600'\n            _hover={{ bg: '#282d3e' }}\n            // _hover={{ bg: '#ebedf0' }}\n            _active={{\n              // bgGradient: 'linear(to-r, teal.500, green.500)',\n              transform: 'scale(0.98)',\n\n            }}>\n            <Text\n              d={{ base: \"none\", md: \"flex\" }}\n              px={4}\n              textAlign='left'\n              fontWeight='thin'\n              color='gray.200'\n            >\n              Search User...\n            </Text>\n            <i className=\"fas fa-search\"\n            ></i>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"lg\" fontWeight=\"bold\" fontFamily=\"Work sans\">\n          General Semantic\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList\n              pl={2}\n              bg=\"#242933\"\n              color=\"#fff\"\n              borderColor='gray.600'\n            >\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${ notif.chat.chatName }`\n                    : `New Message from ${ getSender(user, notif.chat.users) }`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton\n              as={Button}\n              borderWidth='lg'\n              borderColor='gray.600'\n              bg='#282d3e'\n              _hover={{ bg: '#282d3e' }}\n              // _hover={{ bg: '#ebedf0' }}\n              _active={{\n                // bgGradient: 'linear(to-r, teal.500, green.500)',\n                transform: 'scale(0.98)',\n              }}\n              rightIcon={<ChevronDownIcon />}\n              borderRadius='xl'\n            >\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList\n              bg=\"#242933\"\n              color=\"#fff\"\n              _hover={{\n                bg: \"#242933\"\n              }}\n              _active={{\n                bg: \"000\"\n              }}\n              _focus={{\n                bg: \"#242933\"\n\n              }}\n              borderColor='gray.600'\n            >\n              <ProfileModal user={user}>\n                <MenuItem bg=\"#242933\"\n                  borderColor='gray.600'\n                  color=\"#fff\"\n                  _hover={{\n                    bg: \"#242933\"\n                  }}\n                  _active={{\n                    bg: \"000\"\n                  }}\n                  _focus={{\n                    bg: \"#242933\"\n\n                  }}\n                >My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem bg=\"#242933\"\n                borderColor='gray.600'\n                color=\"#fff\"\n                _hover={{\n                  bg: \"#242933\"\n                }} onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent bg=\"#282d3e\" color=\"#fff\">\n          <DrawerHeader borderBottomWidth=\"1px\" borderColor='gray.600'>Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                borderColor='gray.600'\n                width={\"100 %\"}\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch} bgGradient='linear(to-l, #7928CA, #FF0080)'\n                _hover={{ bgGradient: 'linear(to-l, #FF0080, #7928CA)' }}\n                // _hover={{ bg: '#ebedf0' }}\n                _active={{\n                  bgGradient: 'linear(to-r, teal.500, green.500)',\n                  transform: 'scale(0.98)',\n                  borderColor: '#bec3c9',\n                }}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </div >\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\", background: \"#282d3e\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}